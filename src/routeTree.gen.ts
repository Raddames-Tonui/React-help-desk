/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as ProtectedPagesIndexRouteImport } from './routes/_protected/pages/index'
import { Route as PublicAuthResetpasswordRouteImport } from './routes/_public/auth/resetpassword'
import { Route as PublicAuthRegisterRouteImport } from './routes/_public/auth/register'
import { Route as PublicAuthLoginRouteImport } from './routes/_public/auth/login'
import { Route as ProtectedPagesVendorIndexRouteImport } from './routes/_protected/pages/vendor/index'
import { Route as ProtectedPagesOdataIndexRouteImport } from './routes/_protected/pages/odata/index'
import { Route as ProtectedPagesClientIndexRouteImport } from './routes/_protected/pages/client/index'
import { Route as ProtectedPagesVendorDummyRouteImport } from './routes/_protected/pages/vendor/dummy'
import { Route as ProtectedPagesVendorIdRouteImport } from './routes/_protected/pages/vendor/$id'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)
const ProtectedPagesIndexRoute = ProtectedPagesIndexRouteImport.update({
  id: '/pages/',
  path: '/pages/',
  getParentRoute: () => ProtectedRoute,
} as any)
const PublicAuthResetpasswordRoute = PublicAuthResetpasswordRouteImport.update({
  id: '/auth/resetpassword',
  path: '/auth/resetpassword',
  getParentRoute: () => PublicRoute,
} as any)
const PublicAuthRegisterRoute = PublicAuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => PublicRoute,
} as any)
const PublicAuthLoginRoute = PublicAuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => PublicRoute,
} as any)
const ProtectedPagesVendorIndexRoute =
  ProtectedPagesVendorIndexRouteImport.update({
    id: '/pages/vendor/',
    path: '/pages/vendor/',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedPagesOdataIndexRoute =
  ProtectedPagesOdataIndexRouteImport.update({
    id: '/pages/odata/',
    path: '/pages/odata/',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedPagesClientIndexRoute =
  ProtectedPagesClientIndexRouteImport.update({
    id: '/pages/client/',
    path: '/pages/client/',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedPagesVendorDummyRoute =
  ProtectedPagesVendorDummyRouteImport.update({
    id: '/pages/vendor/dummy',
    path: '/pages/vendor/dummy',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedPagesVendorIdRoute = ProtectedPagesVendorIdRouteImport.update({
  id: '/pages/vendor/$id',
  path: '/pages/vendor/$id',
  getParentRoute: () => ProtectedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof PublicIndexRoute
  '/auth/login': typeof PublicAuthLoginRoute
  '/auth/register': typeof PublicAuthRegisterRoute
  '/auth/resetpassword': typeof PublicAuthResetpasswordRoute
  '/pages': typeof ProtectedPagesIndexRoute
  '/pages/vendor/$id': typeof ProtectedPagesVendorIdRoute
  '/pages/vendor/dummy': typeof ProtectedPagesVendorDummyRoute
  '/pages/client': typeof ProtectedPagesClientIndexRoute
  '/pages/odata': typeof ProtectedPagesOdataIndexRoute
  '/pages/vendor': typeof ProtectedPagesVendorIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof PublicIndexRoute
  '/auth/login': typeof PublicAuthLoginRoute
  '/auth/register': typeof PublicAuthRegisterRoute
  '/auth/resetpassword': typeof PublicAuthResetpasswordRoute
  '/pages': typeof ProtectedPagesIndexRoute
  '/pages/vendor/$id': typeof ProtectedPagesVendorIdRoute
  '/pages/vendor/dummy': typeof ProtectedPagesVendorDummyRoute
  '/pages/client': typeof ProtectedPagesClientIndexRoute
  '/pages/odata': typeof ProtectedPagesOdataIndexRoute
  '/pages/vendor': typeof ProtectedPagesVendorIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_public/': typeof PublicIndexRoute
  '/_public/auth/login': typeof PublicAuthLoginRoute
  '/_public/auth/register': typeof PublicAuthRegisterRoute
  '/_public/auth/resetpassword': typeof PublicAuthResetpasswordRoute
  '/_protected/pages/': typeof ProtectedPagesIndexRoute
  '/_protected/pages/vendor/$id': typeof ProtectedPagesVendorIdRoute
  '/_protected/pages/vendor/dummy': typeof ProtectedPagesVendorDummyRoute
  '/_protected/pages/client/': typeof ProtectedPagesClientIndexRoute
  '/_protected/pages/odata/': typeof ProtectedPagesOdataIndexRoute
  '/_protected/pages/vendor/': typeof ProtectedPagesVendorIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/auth/resetpassword'
    | '/pages'
    | '/pages/vendor/$id'
    | '/pages/vendor/dummy'
    | '/pages/client'
    | '/pages/odata'
    | '/pages/vendor'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/auth/resetpassword'
    | '/pages'
    | '/pages/vendor/$id'
    | '/pages/vendor/dummy'
    | '/pages/client'
    | '/pages/odata'
    | '/pages/vendor'
  id:
    | '__root__'
    | '/_protected'
    | '/_public'
    | '/_public/'
    | '/_public/auth/login'
    | '/_public/auth/register'
    | '/_public/auth/resetpassword'
    | '/_protected/pages/'
    | '/_protected/pages/vendor/$id'
    | '/_protected/pages/vendor/dummy'
    | '/_protected/pages/client/'
    | '/_protected/pages/odata/'
    | '/_protected/pages/vendor/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_protected/pages/': {
      id: '/_protected/pages/'
      path: '/pages'
      fullPath: '/pages'
      preLoaderRoute: typeof ProtectedPagesIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_public/auth/resetpassword': {
      id: '/_public/auth/resetpassword'
      path: '/auth/resetpassword'
      fullPath: '/auth/resetpassword'
      preLoaderRoute: typeof PublicAuthResetpasswordRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/auth/register': {
      id: '/_public/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof PublicAuthRegisterRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/auth/login': {
      id: '/_public/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof PublicAuthLoginRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_protected/pages/vendor/': {
      id: '/_protected/pages/vendor/'
      path: '/pages/vendor'
      fullPath: '/pages/vendor'
      preLoaderRoute: typeof ProtectedPagesVendorIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/pages/odata/': {
      id: '/_protected/pages/odata/'
      path: '/pages/odata'
      fullPath: '/pages/odata'
      preLoaderRoute: typeof ProtectedPagesOdataIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/pages/client/': {
      id: '/_protected/pages/client/'
      path: '/pages/client'
      fullPath: '/pages/client'
      preLoaderRoute: typeof ProtectedPagesClientIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/pages/vendor/dummy': {
      id: '/_protected/pages/vendor/dummy'
      path: '/pages/vendor/dummy'
      fullPath: '/pages/vendor/dummy'
      preLoaderRoute: typeof ProtectedPagesVendorDummyRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/pages/vendor/$id': {
      id: '/_protected/pages/vendor/$id'
      path: '/pages/vendor/$id'
      fullPath: '/pages/vendor/$id'
      preLoaderRoute: typeof ProtectedPagesVendorIdRouteImport
      parentRoute: typeof ProtectedRoute
    }
  }
}

interface ProtectedRouteChildren {
  ProtectedPagesIndexRoute: typeof ProtectedPagesIndexRoute
  ProtectedPagesVendorIdRoute: typeof ProtectedPagesVendorIdRoute
  ProtectedPagesVendorDummyRoute: typeof ProtectedPagesVendorDummyRoute
  ProtectedPagesClientIndexRoute: typeof ProtectedPagesClientIndexRoute
  ProtectedPagesOdataIndexRoute: typeof ProtectedPagesOdataIndexRoute
  ProtectedPagesVendorIndexRoute: typeof ProtectedPagesVendorIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedPagesIndexRoute: ProtectedPagesIndexRoute,
  ProtectedPagesVendorIdRoute: ProtectedPagesVendorIdRoute,
  ProtectedPagesVendorDummyRoute: ProtectedPagesVendorDummyRoute,
  ProtectedPagesClientIndexRoute: ProtectedPagesClientIndexRoute,
  ProtectedPagesOdataIndexRoute: ProtectedPagesOdataIndexRoute,
  ProtectedPagesVendorIndexRoute: ProtectedPagesVendorIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

interface PublicRouteChildren {
  PublicIndexRoute: typeof PublicIndexRoute
  PublicAuthLoginRoute: typeof PublicAuthLoginRoute
  PublicAuthRegisterRoute: typeof PublicAuthRegisterRoute
  PublicAuthResetpasswordRoute: typeof PublicAuthResetpasswordRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicIndexRoute: PublicIndexRoute,
  PublicAuthLoginRoute: PublicAuthLoginRoute,
  PublicAuthRegisterRoute: PublicAuthRegisterRoute,
  PublicAuthResetpasswordRoute: PublicAuthResetpasswordRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
