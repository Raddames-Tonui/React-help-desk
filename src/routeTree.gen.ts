/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PagesIndexRouteImport } from './routes/pages/index'
import { Route as Pages_layoutRouteImport } from './routes/pages/__layout'
import { Route as PagesVendorIndexRouteImport } from './routes/pages/vendor/index'
import { Route as PagesOdataIndexRouteImport } from './routes/pages/odata/index'
import { Route as PagesClientIndexRouteImport } from './routes/pages/client/index'
import { Route as PagesVendorVendorRouteImport } from './routes/pages/vendor/$vendor'
import { Route as AuthAuthRegisterRouteImport } from './routes/_auth/auth.register'
import { Route as AuthAuthLoginRouteImport } from './routes/_auth/auth.login'

const PagesRouteImport = createFileRoute('/pages')()

const PagesRoute = PagesRouteImport.update({
  id: '/pages',
  path: '/pages',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PagesIndexRoute = PagesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PagesRoute,
} as any)
const Pages_layoutRoute = Pages_layoutRouteImport.update({
  id: '/__layout',
  getParentRoute: () => PagesRoute,
} as any)
const PagesVendorIndexRoute = PagesVendorIndexRouteImport.update({
  id: '/vendor/',
  path: '/vendor/',
  getParentRoute: () => PagesRoute,
} as any)
const PagesOdataIndexRoute = PagesOdataIndexRouteImport.update({
  id: '/odata/',
  path: '/odata/',
  getParentRoute: () => PagesRoute,
} as any)
const PagesClientIndexRoute = PagesClientIndexRouteImport.update({
  id: '/client/',
  path: '/client/',
  getParentRoute: () => PagesRoute,
} as any)
const PagesVendorVendorRoute = PagesVendorVendorRouteImport.update({
  id: '/vendor/$vendor',
  path: '/vendor/$vendor',
  getParentRoute: () => PagesRoute,
} as any)
const AuthAuthRegisterRoute = AuthAuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthAuthLoginRoute = AuthAuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => AuthRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/pages': typeof Pages_layoutRoute
  '/pages/': typeof PagesIndexRoute
  '/auth/login': typeof AuthAuthLoginRoute
  '/auth/register': typeof AuthAuthRegisterRoute
  '/pages/vendor/$vendor': typeof PagesVendorVendorRoute
  '/pages/client': typeof PagesClientIndexRoute
  '/pages/odata': typeof PagesOdataIndexRoute
  '/pages/vendor': typeof PagesVendorIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/pages': typeof PagesIndexRoute
  '/auth/login': typeof AuthAuthLoginRoute
  '/auth/register': typeof AuthAuthRegisterRoute
  '/pages/vendor/$vendor': typeof PagesVendorVendorRoute
  '/pages/client': typeof PagesClientIndexRoute
  '/pages/odata': typeof PagesOdataIndexRoute
  '/pages/vendor': typeof PagesVendorIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/pages': typeof PagesRouteWithChildren
  '/pages/__layout': typeof Pages_layoutRoute
  '/pages/': typeof PagesIndexRoute
  '/_auth/auth/login': typeof AuthAuthLoginRoute
  '/_auth/auth/register': typeof AuthAuthRegisterRoute
  '/pages/vendor/$vendor': typeof PagesVendorVendorRoute
  '/pages/client/': typeof PagesClientIndexRoute
  '/pages/odata/': typeof PagesOdataIndexRoute
  '/pages/vendor/': typeof PagesVendorIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/pages'
    | '/pages/'
    | '/auth/login'
    | '/auth/register'
    | '/pages/vendor/$vendor'
    | '/pages/client'
    | '/pages/odata'
    | '/pages/vendor'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/pages'
    | '/auth/login'
    | '/auth/register'
    | '/pages/vendor/$vendor'
    | '/pages/client'
    | '/pages/odata'
    | '/pages/vendor'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/pages'
    | '/pages/__layout'
    | '/pages/'
    | '/_auth/auth/login'
    | '/_auth/auth/register'
    | '/pages/vendor/$vendor'
    | '/pages/client/'
    | '/pages/odata/'
    | '/pages/vendor/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  PagesRoute: typeof PagesRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/pages': {
      id: '/pages'
      path: '/pages'
      fullPath: '/pages'
      preLoaderRoute: typeof PagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pages/': {
      id: '/pages/'
      path: '/'
      fullPath: '/pages/'
      preLoaderRoute: typeof PagesIndexRouteImport
      parentRoute: typeof PagesRoute
    }
    '/pages/__layout': {
      id: '/pages/__layout'
      path: '/pages'
      fullPath: '/pages'
      preLoaderRoute: typeof Pages_layoutRouteImport
      parentRoute: typeof PagesRoute
    }
    '/pages/vendor/': {
      id: '/pages/vendor/'
      path: '/vendor'
      fullPath: '/pages/vendor'
      preLoaderRoute: typeof PagesVendorIndexRouteImport
      parentRoute: typeof PagesRoute
    }
    '/pages/odata/': {
      id: '/pages/odata/'
      path: '/odata'
      fullPath: '/pages/odata'
      preLoaderRoute: typeof PagesOdataIndexRouteImport
      parentRoute: typeof PagesRoute
    }
    '/pages/client/': {
      id: '/pages/client/'
      path: '/client'
      fullPath: '/pages/client'
      preLoaderRoute: typeof PagesClientIndexRouteImport
      parentRoute: typeof PagesRoute
    }
    '/pages/vendor/$vendor': {
      id: '/pages/vendor/$vendor'
      path: '/vendor/$vendor'
      fullPath: '/pages/vendor/$vendor'
      preLoaderRoute: typeof PagesVendorVendorRouteImport
      parentRoute: typeof PagesRoute
    }
    '/_auth/auth/register': {
      id: '/_auth/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthAuthRegisterRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/auth/login': {
      id: '/_auth/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthAuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthAuthLoginRoute: typeof AuthAuthLoginRoute
  AuthAuthRegisterRoute: typeof AuthAuthRegisterRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthAuthLoginRoute: AuthAuthLoginRoute,
  AuthAuthRegisterRoute: AuthAuthRegisterRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface PagesRouteChildren {
  Pages_layoutRoute: typeof Pages_layoutRoute
  PagesIndexRoute: typeof PagesIndexRoute
  PagesVendorVendorRoute: typeof PagesVendorVendorRoute
  PagesClientIndexRoute: typeof PagesClientIndexRoute
  PagesOdataIndexRoute: typeof PagesOdataIndexRoute
  PagesVendorIndexRoute: typeof PagesVendorIndexRoute
}

const PagesRouteChildren: PagesRouteChildren = {
  Pages_layoutRoute: Pages_layoutRoute,
  PagesIndexRoute: PagesIndexRoute,
  PagesVendorVendorRoute: PagesVendorVendorRoute,
  PagesClientIndexRoute: PagesClientIndexRoute,
  PagesOdataIndexRoute: PagesOdataIndexRoute,
  PagesVendorIndexRoute: PagesVendorIndexRoute,
}

const PagesRouteWithChildren = PagesRoute._addFileChildren(PagesRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  PagesRoute: PagesRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
