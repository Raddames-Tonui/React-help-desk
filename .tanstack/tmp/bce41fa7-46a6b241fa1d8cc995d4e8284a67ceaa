/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as _notFoundRouteImport } from './routes/__not-found'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProtectedAdminIndexRouteImport } from './routes/_protected/admin/index'
import { Route as PublicAuthUnderdevelopmentRouteImport } from './routes/_public/auth/underdevelopment'
import { Route as PublicAuthUnauthorizedRouteImport } from './routes/_public/auth/unauthorized'
import { Route as PublicAuthResetpasswordRouteImport } from './routes/_public/auth/resetpassword'
import { Route as PublicAuthRegisterRouteImport } from './routes/_public/auth/register'
import { Route as PublicAuthLoginRouteImport } from './routes/_public/auth/login'
import { Route as ProtectedAdminUserIdRouteImport } from './routes/_protected/admin/$userId'
import { Route as ProtectedAdminUsersIndexRouteImport } from './routes/_protected/admin/users/index'
import { Route as ProtectedAdminTasksIndexRouteImport } from './routes/_protected/admin/tasks/index'
import { Route as ProtectedAdminSubjectsIndexRouteImport } from './routes/_protected/admin/subjects/index'
import { Route as ProtectedAdminTasksTaskIdRouteImport } from './routes/_protected/admin/tasks/$taskId'
import { Route as ProtectedAdminSubjectsSubjectIdRouteImport } from './routes/_protected/admin/subjects/$subjectId'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const _notFoundRoute = _notFoundRouteImport.update({
  id: '/__not-found',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedAdminIndexRoute = ProtectedAdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => ProtectedRoute,
} as any)
const PublicAuthUnderdevelopmentRoute =
  PublicAuthUnderdevelopmentRouteImport.update({
    id: '/auth/underdevelopment',
    path: '/auth/underdevelopment',
    getParentRoute: () => PublicRoute,
  } as any)
const PublicAuthUnauthorizedRoute = PublicAuthUnauthorizedRouteImport.update({
  id: '/auth/unauthorized',
  path: '/auth/unauthorized',
  getParentRoute: () => PublicRoute,
} as any)
const PublicAuthResetpasswordRoute = PublicAuthResetpasswordRouteImport.update({
  id: '/auth/resetpassword',
  path: '/auth/resetpassword',
  getParentRoute: () => PublicRoute,
} as any)
const PublicAuthRegisterRoute = PublicAuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => PublicRoute,
} as any)
const PublicAuthLoginRoute = PublicAuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => PublicRoute,
} as any)
const ProtectedAdminUserIdRoute = ProtectedAdminUserIdRouteImport.update({
  id: '/admin/$userId',
  path: '/admin/$userId',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedAdminUsersIndexRoute =
  ProtectedAdminUsersIndexRouteImport.update({
    id: '/admin/users/',
    path: '/admin/users/',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedAdminTasksIndexRoute =
  ProtectedAdminTasksIndexRouteImport.update({
    id: '/admin/tasks/',
    path: '/admin/tasks/',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedAdminSubjectsIndexRoute =
  ProtectedAdminSubjectsIndexRouteImport.update({
    id: '/admin/subjects/',
    path: '/admin/subjects/',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedAdminTasksTaskIdRoute =
  ProtectedAdminTasksTaskIdRouteImport.update({
    id: '/admin/tasks/$taskId',
    path: '/admin/tasks/$taskId',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedAdminSubjectsSubjectIdRoute =
  ProtectedAdminSubjectsSubjectIdRouteImport.update({
    id: '/admin/subjects/$subjectId',
    path: '/admin/subjects/$subjectId',
    getParentRoute: () => ProtectedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin/$userId': typeof ProtectedAdminUserIdRoute
  '/auth/login': typeof PublicAuthLoginRoute
  '/auth/register': typeof PublicAuthRegisterRoute
  '/auth/resetpassword': typeof PublicAuthResetpasswordRoute
  '/auth/unauthorized': typeof PublicAuthUnauthorizedRoute
  '/auth/underdevelopment': typeof PublicAuthUnderdevelopmentRoute
  '/admin': typeof ProtectedAdminIndexRoute
  '/admin/subjects/$subjectId': typeof ProtectedAdminSubjectsSubjectIdRoute
  '/admin/tasks/$taskId': typeof ProtectedAdminTasksTaskIdRoute
  '/admin/subjects': typeof ProtectedAdminSubjectsIndexRoute
  '/admin/tasks': typeof ProtectedAdminTasksIndexRoute
  '/admin/users': typeof ProtectedAdminUsersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin/$userId': typeof ProtectedAdminUserIdRoute
  '/auth/login': typeof PublicAuthLoginRoute
  '/auth/register': typeof PublicAuthRegisterRoute
  '/auth/resetpassword': typeof PublicAuthResetpasswordRoute
  '/auth/unauthorized': typeof PublicAuthUnauthorizedRoute
  '/auth/underdevelopment': typeof PublicAuthUnderdevelopmentRoute
  '/admin': typeof ProtectedAdminIndexRoute
  '/admin/subjects/$subjectId': typeof ProtectedAdminSubjectsSubjectIdRoute
  '/admin/tasks/$taskId': typeof ProtectedAdminTasksTaskIdRoute
  '/admin/subjects': typeof ProtectedAdminSubjectsIndexRoute
  '/admin/tasks': typeof ProtectedAdminTasksIndexRoute
  '/admin/users': typeof ProtectedAdminUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/__not-found': typeof _notFoundRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_protected/admin/$userId': typeof ProtectedAdminUserIdRoute
  '/_public/auth/login': typeof PublicAuthLoginRoute
  '/_public/auth/register': typeof PublicAuthRegisterRoute
  '/_public/auth/resetpassword': typeof PublicAuthResetpasswordRoute
  '/_public/auth/unauthorized': typeof PublicAuthUnauthorizedRoute
  '/_public/auth/underdevelopment': typeof PublicAuthUnderdevelopmentRoute
  '/_protected/admin/': typeof ProtectedAdminIndexRoute
  '/_protected/admin/subjects/$subjectId': typeof ProtectedAdminSubjectsSubjectIdRoute
  '/_protected/admin/tasks/$taskId': typeof ProtectedAdminTasksTaskIdRoute
  '/_protected/admin/subjects/': typeof ProtectedAdminSubjectsIndexRoute
  '/_protected/admin/tasks/': typeof ProtectedAdminTasksIndexRoute
  '/_protected/admin/users/': typeof ProtectedAdminUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin/$userId'
    | '/auth/login'
    | '/auth/register'
    | '/auth/resetpassword'
    | '/auth/unauthorized'
    | '/auth/underdevelopment'
    | '/admin'
    | '/admin/subjects/$subjectId'
    | '/admin/tasks/$taskId'
    | '/admin/subjects'
    | '/admin/tasks'
    | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin/$userId'
    | '/auth/login'
    | '/auth/register'
    | '/auth/resetpassword'
    | '/auth/unauthorized'
    | '/auth/underdevelopment'
    | '/admin'
    | '/admin/subjects/$subjectId'
    | '/admin/tasks/$taskId'
    | '/admin/subjects'
    | '/admin/tasks'
    | '/admin/users'
  id:
    | '__root__'
    | '/'
    | '/__not-found'
    | '/_protected'
    | '/_public'
    | '/_protected/admin/$userId'
    | '/_public/auth/login'
    | '/_public/auth/register'
    | '/_public/auth/resetpassword'
    | '/_public/auth/unauthorized'
    | '/_public/auth/underdevelopment'
    | '/_protected/admin/'
    | '/_protected/admin/subjects/$subjectId'
    | '/_protected/admin/tasks/$taskId'
    | '/_protected/admin/subjects/'
    | '/_protected/admin/tasks/'
    | '/_protected/admin/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  _notFoundRoute: typeof _notFoundRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__not-found': {
      id: '/__not-found'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _notFoundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/admin/': {
      id: '/_protected/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof ProtectedAdminIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_public/auth/underdevelopment': {
      id: '/_public/auth/underdevelopment'
      path: '/auth/underdevelopment'
      fullPath: '/auth/underdevelopment'
      preLoaderRoute: typeof PublicAuthUnderdevelopmentRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/auth/unauthorized': {
      id: '/_public/auth/unauthorized'
      path: '/auth/unauthorized'
      fullPath: '/auth/unauthorized'
      preLoaderRoute: typeof PublicAuthUnauthorizedRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/auth/resetpassword': {
      id: '/_public/auth/resetpassword'
      path: '/auth/resetpassword'
      fullPath: '/auth/resetpassword'
      preLoaderRoute: typeof PublicAuthResetpasswordRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/auth/register': {
      id: '/_public/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof PublicAuthRegisterRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/auth/login': {
      id: '/_public/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof PublicAuthLoginRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_protected/admin/$userId': {
      id: '/_protected/admin/$userId'
      path: '/admin/$userId'
      fullPath: '/admin/$userId'
      preLoaderRoute: typeof ProtectedAdminUserIdRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/admin/users/': {
      id: '/_protected/admin/users/'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof ProtectedAdminUsersIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/admin/tasks/': {
      id: '/_protected/admin/tasks/'
      path: '/admin/tasks'
      fullPath: '/admin/tasks'
      preLoaderRoute: typeof ProtectedAdminTasksIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/admin/subjects/': {
      id: '/_protected/admin/subjects/'
      path: '/admin/subjects'
      fullPath: '/admin/subjects'
      preLoaderRoute: typeof ProtectedAdminSubjectsIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/admin/tasks/$taskId': {
      id: '/_protected/admin/tasks/$taskId'
      path: '/admin/tasks/$taskId'
      fullPath: '/admin/tasks/$taskId'
      preLoaderRoute: typeof ProtectedAdminTasksTaskIdRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/admin/subjects/$subjectId': {
      id: '/_protected/admin/subjects/$subjectId'
      path: '/admin/subjects/$subjectId'
      fullPath: '/admin/subjects/$subjectId'
      preLoaderRoute: typeof ProtectedAdminSubjectsSubjectIdRouteImport
      parentRoute: typeof ProtectedRoute
    }
  }
}

interface ProtectedRouteChildren {
  ProtectedAdminUserIdRoute: typeof ProtectedAdminUserIdRoute
  ProtectedAdminIndexRoute: typeof ProtectedAdminIndexRoute
  ProtectedAdminSubjectsSubjectIdRoute: typeof ProtectedAdminSubjectsSubjectIdRoute
  ProtectedAdminTasksTaskIdRoute: typeof ProtectedAdminTasksTaskIdRoute
  ProtectedAdminSubjectsIndexRoute: typeof ProtectedAdminSubjectsIndexRoute
  ProtectedAdminTasksIndexRoute: typeof ProtectedAdminTasksIndexRoute
  ProtectedAdminUsersIndexRoute: typeof ProtectedAdminUsersIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedAdminUserIdRoute: ProtectedAdminUserIdRoute,
  ProtectedAdminIndexRoute: ProtectedAdminIndexRoute,
  ProtectedAdminSubjectsSubjectIdRoute: ProtectedAdminSubjectsSubjectIdRoute,
  ProtectedAdminTasksTaskIdRoute: ProtectedAdminTasksTaskIdRoute,
  ProtectedAdminSubjectsIndexRoute: ProtectedAdminSubjectsIndexRoute,
  ProtectedAdminTasksIndexRoute: ProtectedAdminTasksIndexRoute,
  ProtectedAdminUsersIndexRoute: ProtectedAdminUsersIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

interface PublicRouteChildren {
  PublicAuthLoginRoute: typeof PublicAuthLoginRoute
  PublicAuthRegisterRoute: typeof PublicAuthRegisterRoute
  PublicAuthResetpasswordRoute: typeof PublicAuthResetpasswordRoute
  PublicAuthUnauthorizedRoute: typeof PublicAuthUnauthorizedRoute
  PublicAuthUnderdevelopmentRoute: typeof PublicAuthUnderdevelopmentRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicAuthLoginRoute: PublicAuthLoginRoute,
  PublicAuthRegisterRoute: PublicAuthRegisterRoute,
  PublicAuthResetpasswordRoute: PublicAuthResetpasswordRoute,
  PublicAuthUnauthorizedRoute: PublicAuthUnauthorizedRoute,
  PublicAuthUnderdevelopmentRoute: PublicAuthUnderdevelopmentRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  _notFoundRoute: _notFoundRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
