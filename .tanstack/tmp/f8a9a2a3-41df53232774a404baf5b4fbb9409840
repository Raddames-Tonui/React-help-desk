/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as Pages_layoutRouteImport } from './routes/pages/__layout'
import { Route as PagesVendorIndexRouteImport } from './routes/pages/vendor/index'
import { Route as PagesOdataIndexRouteImport } from './routes/pages/odata/index'
import { Route as PagesClientIndexRouteImport } from './routes/pages/client/index'

const PagesRouteImport = createFileRoute('/pages')()

const PagesRoute = PagesRouteImport.update({
  id: '/pages',
  path: '/pages',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const Pages_layoutRoute = Pages_layoutRouteImport.update({
  id: '/__layout',
  getParentRoute: () => PagesRoute,
} as any)
const PagesVendorIndexRoute = PagesVendorIndexRouteImport.update({
  id: '/vendor/',
  path: '/vendor/',
  getParentRoute: () => PagesRoute,
} as any)
const PagesOdataIndexRoute = PagesOdataIndexRouteImport.update({
  id: '/odata/',
  path: '/odata/',
  getParentRoute: () => PagesRoute,
} as any)
const PagesClientIndexRoute = PagesClientIndexRouteImport.update({
  id: '/client/',
  path: '/client/',
  getParentRoute: () => PagesRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/pages': typeof Pages_layoutRoute
  '/pages/client': typeof PagesClientIndexRoute
  '/pages/odata': typeof PagesOdataIndexRoute
  '/pages/vendor': typeof PagesVendorIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/pages': typeof Pages_layoutRoute
  '/pages/client': typeof PagesClientIndexRoute
  '/pages/odata': typeof PagesOdataIndexRoute
  '/pages/vendor': typeof PagesVendorIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/pages': typeof PagesRouteWithChildren
  '/pages/__layout': typeof Pages_layoutRoute
  '/pages/client/': typeof PagesClientIndexRoute
  '/pages/odata/': typeof PagesOdataIndexRoute
  '/pages/vendor/': typeof PagesVendorIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/pages' | '/pages/client' | '/pages/odata' | '/pages/vendor'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/pages' | '/pages/client' | '/pages/odata' | '/pages/vendor'
  id:
    | '__root__'
    | '/'
    | '/pages'
    | '/pages/__layout'
    | '/pages/client/'
    | '/pages/odata/'
    | '/pages/vendor/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PagesRoute: typeof PagesRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/pages': {
      id: '/pages'
      path: '/pages'
      fullPath: '/pages'
      preLoaderRoute: typeof PagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pages/__layout': {
      id: '/pages/__layout'
      path: '/pages'
      fullPath: '/pages'
      preLoaderRoute: typeof Pages_layoutRouteImport
      parentRoute: typeof PagesRoute
    }
    '/pages/vendor/': {
      id: '/pages/vendor/'
      path: '/vendor'
      fullPath: '/pages/vendor'
      preLoaderRoute: typeof PagesVendorIndexRouteImport
      parentRoute: typeof PagesRoute
    }
    '/pages/odata/': {
      id: '/pages/odata/'
      path: '/odata'
      fullPath: '/pages/odata'
      preLoaderRoute: typeof PagesOdataIndexRouteImport
      parentRoute: typeof PagesRoute
    }
    '/pages/client/': {
      id: '/pages/client/'
      path: '/client'
      fullPath: '/pages/client'
      preLoaderRoute: typeof PagesClientIndexRouteImport
      parentRoute: typeof PagesRoute
    }
  }
}

interface PagesRouteChildren {
  Pages_layoutRoute: typeof Pages_layoutRoute
  PagesClientIndexRoute: typeof PagesClientIndexRoute
  PagesOdataIndexRoute: typeof PagesOdataIndexRoute
  PagesVendorIndexRoute: typeof PagesVendorIndexRoute
}

const PagesRouteChildren: PagesRouteChildren = {
  Pages_layoutRoute: Pages_layoutRoute,
  PagesClientIndexRoute: PagesClientIndexRoute,
  PagesOdataIndexRoute: PagesOdataIndexRoute,
  PagesVendorIndexRoute: PagesVendorIndexRoute,
}

const PagesRouteWithChildren = PagesRoute._addFileChildren(PagesRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PagesRoute: PagesRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
