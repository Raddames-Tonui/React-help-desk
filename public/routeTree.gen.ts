/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PagesIndexRouteImport } from './routes/pages/index'
import { Route as Pages_layoutRouteImport } from './routes/pages/__layout'
import { Route as AuthResetpasswordRouteImport } from './routes/auth/resetpassword'
import { Route as AuthRegisterRouteImport } from './routes/auth/signup'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AuthForgotpasswordRouteImport } from './routes/auth/forgotpassword'
import { Route as Auth_layoutRouteImport } from './routes/auth/__layout'
import { Route as PagesVendorIndexRouteImport } from './routes/pages/vendor/index'
import { Route as PagesOdataIndexRouteImport } from './routes/pages/odata.tsx/index'
import { Route as PagesClientIndexRouteImport } from './routes/pages/client/index'

const PagesRouteImport = createFileRoute('/pages')()
const AuthRouteImport = createFileRoute('/auth')()

const PagesRoute = PagesRouteImport.update({
  id: '/pages',
  path: '/pages',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PagesIndexRoute = PagesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PagesRoute,
} as any)
const Pages_layoutRoute = Pages_layoutRouteImport.update({
  id: '/__layout',
  getParentRoute: () => PagesRoute,
} as any)
const AuthResetpasswordRoute = AuthResetpasswordRouteImport.update({
  id: '/resetpassword',
  path: '/resetpassword',
  getParentRoute: () => AuthRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)
const AuthForgotpasswordRoute = AuthForgotpasswordRouteImport.update({
  id: '/forgotpassword',
  path: '/forgotpassword',
  getParentRoute: () => AuthRoute,
} as any)
const Auth_layoutRoute = Auth_layoutRouteImport.update({
  id: '/__layout',
  getParentRoute: () => AuthRoute,
} as any)
const PagesVendorIndexRoute = PagesVendorIndexRouteImport.update({
  id: '/vendor/',
  path: '/vendor/',
  getParentRoute: () => PagesRoute,
} as any)
const PagesOdataIndexRoute = PagesOdataIndexRouteImport.update({
  id: '/odata/',
  path: '/odata/',
  getParentRoute: () => PagesRoute,
} as any)
const PagesClientIndexRoute = PagesClientIndexRouteImport.update({
  id: '/client/',
  path: '/client/',
  getParentRoute: () => PagesRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof Auth_layoutRoute
  '/auth/forgotpassword': typeof AuthForgotpasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/resetpassword': typeof AuthResetpasswordRoute
  '/pages': typeof Pages_layoutRoute
  '/pages/': typeof PagesIndexRoute
  '/pages/client': typeof PagesClientIndexRoute
  '/pages/odata': typeof PagesOdataIndexRoute
  '/pages/vendor': typeof PagesVendorIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof Auth_layoutRoute
  '/auth/forgotpassword': typeof AuthForgotpasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/resetpassword': typeof AuthResetpasswordRoute
  '/pages': typeof PagesIndexRoute
  '/pages/client': typeof PagesClientIndexRoute
  '/pages/odata': typeof PagesOdataIndexRoute
  '/pages/vendor': typeof PagesVendorIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof AuthRouteWithChildren
  '/auth/__layout': typeof Auth_layoutRoute
  '/auth/forgotpassword': typeof AuthForgotpasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/resetpassword': typeof AuthResetpasswordRoute
  '/pages': typeof PagesRouteWithChildren
  '/pages/__layout': typeof Pages_layoutRoute
  '/pages/': typeof PagesIndexRoute
  '/pages/client/': typeof PagesClientIndexRoute
  '/pages/odata/': typeof PagesOdataIndexRoute
  '/pages/vendor/': typeof PagesVendorIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/auth'
    | '/auth/forgotpassword'
    | '/auth/login'
    | '/auth/register'
    | '/auth/resetpassword'
    | '/pages'
    | '/pages/'
    | '/pages/client'
    | '/pages/odata'
    | '/pages/vendor'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/auth'
    | '/auth/forgotpassword'
    | '/auth/login'
    | '/auth/register'
    | '/auth/resetpasswor   d'
    | '/pages'
    | '/pages/client'
    | '/pages/odata'
    | '/pages/vendor'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/auth'
    | '/auth/__layout'
    | '/auth/forgotpassword'
    | '/auth/login'
    | '/auth/register'
    | '/auth/resetpassword'
    | '/pages'
    | '/pages/__layout'
    | '/pages/'
    | '/pages/client/'
    | '/pages/odata/'
    | '/pages/vendor/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AuthRoute: typeof AuthRouteWithChildren
  PagesRoute: typeof PagesRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/pages': {
      id: '/pages'
      path: '/pages'
      fullPath: '/pages'
      preLoaderRoute: typeof PagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pages/': {
      id: '/pages/'
      path: '/'
      fullPath: '/pages/'
      preLoaderRoute: typeof PagesIndexRouteImport
      parentRoute: typeof PagesRoute
    }
    '/pages/__layout': {
      id: '/pages/__layout'
      path: '/pages'
      fullPath: '/pages'
      preLoaderRoute: typeof Pages_layoutRouteImport
      parentRoute: typeof PagesRoute
    }
    '/auth/resetpassword': {
      id: '/auth/resetpassword'
      path: '/resetpassword'
      fullPath: '/auth/resetpassword'
      preLoaderRoute: typeof AuthResetpasswordRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/forgotpassword': {
      id: '/auth/forgotpassword'
      path: '/forgotpassword'
      fullPath: '/auth/forgotpassword'
      preLoaderRoute: typeof AuthForgotpasswordRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/__layout': {
      id: '/auth/__layout'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof Auth_layoutRouteImport
      parentRoute: typeof AuthRoute
    }
    '/pages/vendor/': {
      id: '/pages/vendor/'
      path: '/vendor'
      fullPath: '/pages/vendor'
      preLoaderRoute: typeof PagesVendorIndexRouteImport
      parentRoute: typeof PagesRoute
    }
    '/pages/odata/': {
      id: '/pages/odata/'
      path: '/odata'
      fullPath: '/pages/odata'
      preLoaderRoute: typeof PagesOdataIndexRouteImport
      parentRoute: typeof PagesRoute
    }
    '/pages/client/': {
      id: '/pages/client/'
      path: '/client'
      fullPath: '/pages/client'
      preLoaderRoute: typeof PagesClientIndexRouteImport
      parentRoute: typeof PagesRoute
    }
  }
}

interface AuthRouteChildren {
  Auth_layoutRoute: typeof Auth_layoutRoute
  AuthForgotpasswordRoute: typeof AuthForgotpasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthResetpasswordRoute: typeof AuthResetpasswordRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  Auth_layoutRoute: Auth_layoutRoute,
  AuthForgotpasswordRoute: AuthForgotpasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthResetpasswordRoute: AuthResetpasswordRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface PagesRouteChildren {
  Pages_layoutRoute: typeof Pages_layoutRoute
  PagesIndexRoute: typeof PagesIndexRoute
  PagesClientIndexRoute: typeof PagesClientIndexRoute
  PagesOdataIndexRoute: typeof PagesOdataIndexRoute
  PagesVendorIndexRoute: typeof PagesVendorIndexRoute
}

const PagesRouteChildren: PagesRouteChildren = {
  Pages_layoutRoute: Pages_layoutRoute,
  PagesIndexRoute: PagesIndexRoute,
  PagesClientIndexRoute: PagesClientIndexRoute,
  PagesOdataIndexRoute: PagesOdataIndexRoute,
  PagesVendorIndexRoute: PagesVendorIndexRoute,
}

const PagesRouteWithChildren = PagesRoute._addFileChildren(PagesRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AuthRoute: AuthRouteWithChildren,
  PagesRoute: PagesRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
